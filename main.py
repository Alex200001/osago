
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
import logging
import os
import re

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
ADMIN_ID = 1195423197
user_data = {}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –û–°–ê–ì–û"), KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"))

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–æ–π –ö–ª–∏–µ–Ω—Ç! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º Telegram-–±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –û–°–ê–ì–û")
async def start_survey(msg: types.Message):
    user_data[msg.from_user.id] = {"step": "name"}
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "name")
async def handle_name(msg: types.Message):
    user_data[msg.from_user.id]["name"] = msg.text
    user_data[msg.from_user.id]["step"] = "phone"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "phone")
async def handle_phone(msg: types.Message):
    phone = msg.text.strip()
    if re.fullmatch(r"\+7\d{10}", phone):
        user_data[msg.from_user.id]["phone"] = phone
        user_data[msg.from_user.id]["step"] = "gosnomer"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ø—Ä–∏–º–µ—Ä: –ê123–í–°77 –∏–ª–∏ A123BC799):")
    else:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "gosnomer")
async def handle_gosnomer(msg: types.Message):
    gosnomer = msg.text.strip().upper()
    if re.fullmatch(r"^[–ê-–ØA-Z]{1}\d{3}[–ê-–ØA-Z]{2}\d{2,3}$", gosnomer):
        user_data[msg.from_user.id]["gosnomer"] = gosnomer
        user_data[msg.from_user.id]["step"] = "vin"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä. –û–Ω —É–∫–∞–∑–∞–Ω –≤ –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¢–°. (:")
    else:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –ê123–í–°77 –∏–ª–∏ A123BC799")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "vin")
async def handle_vin(msg: types.Message):
    user_data[msg.from_user.id]["vin"] = msg.text
    user_data[msg.from_user.id]["step"] = "brand"
    await msg.answer("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "brand")
async def handle_brand(msg: types.Message):
    user_data[msg.from_user.id]["brand"] = msg.text
    user_data[msg.from_user.id]["step"] = "year"
    await msg.answer("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "year")
async def handle_year(msg: types.Message):
    user_data[msg.from_user.id]["year"] = msg.text
    data = user_data[msg.from_user.id]

    summary = (
        "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –û–°–ê–ì–û:\n"
        f"üë§ –§–ò–û: {data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üöó –ì–æ—Å–Ω–æ–º–µ—Ä: {data.get('gosnomer')}\n"
        f"üîé VIN: {data.get('vin')}\n"
        f"üöò –ú–∞—Ä–∫–∞: {data.get('brand')}\n"
        f"üìÜ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {data.get('year')}"
    )

    await msg.answer("–°–ø–∞—Å–∏–±–æ, —É–≤–∞–∂–∞–µ–º—ã–π –ö–ª–∏–µ–Ω—Ç! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.", reply_markup=main_kb)
    user_data[msg.from_user.id]["step"] = None

    try:
        await bot.send_message(ADMIN_ID, summary)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

@dp.message_handler(lambda m: m.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def ask_region(msg: types.Message):
    user_data[msg.from_user.id] = {"step": "calc_region"}
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–æ–ª–≥–æ–≥—Ä–∞–¥):")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "calc_region")
async def handle_region(msg: types.Message):
    user_data[msg.from_user.id]["region"] = msg.text
    user_data[msg.from_user.id]["step"] = "calc_power"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ª.—Å.:")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "calc_power")
async def handle_power(msg: types.Message):
    try:
        power = int(msg.text)
        user_data[msg.from_user.id]["power"] = power
        user_data[msg.from_user.id]["step"] = "calc_age"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è:")
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ—â–Ω–æ—Å—Ç—å –≤ –ª.—Å.)")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "calc_age")
async def handle_age(msg: types.Message):
    try:
        age = int(msg.text)
        user_data[msg.from_user.id]["age"] = age
        user_data[msg.from_user.id]["step"] = "calc_kbm"
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ö–ë–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,17 ‚Äî –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞):")
    except ValueError:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "calc_kbm")
async def handle_kbm(msg: types.Message):
    try:
        kbm = float(msg.text.replace(",", "."))
        base = 8000
        result = base * kbm
        await msg.answer(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –û–°–ê–ì–û. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!: {int(result)} ‚ÇΩ", reply_markup=main_kb)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö–ë–ú.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
